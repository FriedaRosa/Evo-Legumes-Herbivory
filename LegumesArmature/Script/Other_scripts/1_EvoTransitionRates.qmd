---
title: "Legumes_Armature_Evo_Analyses_v2"
author: "Friederike WÃ¶lke, Rachel Souza Ferreira, Renske Onstein"
format: html
  code:
    collapse: true
    folding: hide
editor: visual
---

```{r}
rm(list=ls())
gc()
```

## Set path variables

```{r}

# [1] traitData ================================================================= #

## Processed data:
p.mammals.traits.short <- "../input/Mammals/Processed/mammal_traits_short.csv" # created from this script
p.mammals.traits.MCC <- "../input/Mammals/Processed/mammal_traits_MCC.csv" # created from this script

p.legumes.traits.corrected <- "../input/Legumes/Processed/Matrix_all_traits_tipsmatched.csv" # created from this script


# [2] PhyloTrees ================================================================ #

## Processed data:
p.mammals.MCC <- "../input/Mammals/Processed/mammal_MCC.nex" # created from this script
p.mammals.MCC_drop <- "../input/Mammals/Processed/mammal_MCC_drop.nex" # created from this script

p.legumes.MCC_drop <- "../input/Legumes/Processed/Legumes_MCC_drop.rds"
# [3] Pre-processing files ====================================================== #



# General paths ============================================================= #

## Out path
out.path <- "../../output/"

```

## Load libraries

```{r}
library(geiger)
library(ape)
library(phytools)
library(dplyr)
```

## Pre-Processing:

*see Script: 0_Data_PreProcessing.R*

### - Compute MCC tree for Mammals

-   requires: set of 1000 trees from the posterior distribution of the
    mammals phylogeny\
    (input/Mammals/Raw/)
-   phagorn library and mcc() function
-   produces file:
    -   input/Mammals/Processed/mammal_MCC.nex

### - Match tip labels and species names in Legumes data

-   requires:

    -   input/Legumes/Raw/replace_tip_labels.csv

    -   input/Legumes/Raw/Matrix_all_traits.csv

    -   input/Legumes/Raw/Mimo_metachronogram_mcc.tre

-   produces:

    -   input/Legumes/Processed/Matrix_all_traits_tipsmatched.csv

    -   output/CSV/legume_traits_short.csv

### - Data filtering for megaherbivory

-   input/Mammals/Processed/Mammals_MCC_drop.rds

### - Prune species from tree (Mammals)

-   input/Mammals/Processed/Mammals_MCC_drop.rds

-   input/Mammals/Processed/Mammals_traits_drop.rds

### - Prune species from tree (Legumes)

-   input/Legumes/Processed/Legumes_MCC_drop.rds

-   input/Legumes/Processed/Legumes_traits_drop.rds

### - Make trait vector (Mammals)

-   input/Mammals/Processed/Mass.rds

### - Make trait vector (Legumes)

-   input/Legumes/Processed/Armature.rds

## - Summary of objects required:

```{r}
# Final pruned MCC tree:

#tree_mammals <- mammal_PhyloSubset
tree_mammals <- ladderize(readRDS("../../input/Mammals/Processed/Mammals_MCC_drop.rds"))

#tree_legumes <- mimo_PhyloSubset
tree_legumes <- ladderize(readRDS("../../input/Legumes/Processed/Legumes_MCC_drop.rds"))

# Vector with Megaherbivory information:
#trait_mammals <- Mass
trait_mammals <- readRDS("../../input/Mammals/Processed/Mass.rds")

#trait_legumes <- Armature
trait_legumes <- readRDS("../../input/Legumes/Processed/Armature.rds")

```

### - MK models

```{r, eval=F, echo=T}
# Mk models ============================
# estimate the rates of transitioning between ancestral states given a hypothesis 
# (either equal rates(ER), or different rates(ARD))
tree <- ladderize(readRDS("../../input/Mammals/Processed/Mammals_MCC_drop.rds"))
trait <- readRDS("../../input/Mammals/Processed/Mammals_traits_drop.rds")

# computing time = 2.297s
system.time(
  equal <- fitDiscrete(tree, trait, model = "ER"), gcFirst = T
)

# computing time = 8.726s
system.time(
  ard <- fitDiscrete(tree, trait, model = "ARD")
)

# computing time = 8.726s
system.time(
  sym <- fitDiscrete(tree, trait, model = "SYM")
)


# Calculate AIC weights
aic.discrete <- setNames(c(equal$opt$aic, ard$opt$aic, sym$opt$aic), c("equal", "different", "symmetric"))
weights <- aicw(aic.discrete)
weights # ARD model performs better for megaherbivore/other

mammals_tree <- tree
mammals_trait <- trait

rm(trait, tree, equal, ard, aic.discrete, weights)

```

```{r}
# Mk models ============================
# estimate the rates of transitioning between ancestral states given a hypothesis 
# (either equal rates(ER), or different rates(ARD))

mimo_traitDataSubset2 <- readRDS("../../input/Legumes/Processed/Legumes_traits_drop.rds")
tree <- ladderize(readRDS("../../input/Legumes/Processed/Legumes_MCC_drop.rds"))




# Select Armatures trait (and make a vector from it)
Armature <- numeric(length = nrow(mimo_traitDataSubset2))

# Create the 'Armature' factor based on the 'Armatures' column
Armature <- ifelse(mimo_traitDataSubset2$Armatures == 0, "no_armature", "armature")

# Convert to a factor
Armature <- as.factor(Armature)
table(Armature)

# Reorder data if needed (assuming ReorderData and tree2 are defined)
Armature <- ReorderData(mimo_PhyloSubset, Armature, taxa.names="names")
names(Armature) <- rownames(mimo_traitDataSubset2)

# ordered trait vector for models (not dataframe)
str(Armature) # make sure it's a factor
trait <- Armature



# computing time = 2.297s
system.time(
  equal <- fitDiscrete(tree, trait, model = "ER"), gcFirst = T
)

# computing time = 8.726s
system.time(
  ard <- fitDiscrete(tree, trait, model = "ARD")
)

# Calculate AIC weights
aic.discrete <- setNames(c(equal$opt$aic, ard$opt$aic), c("equal", "different"))
weights <- aicw(aic.discrete)
weights # ARD model performs better for armature/no armature

legumes_tree <- tree
legumes_trait <- trait

rm(trait, tree, equal, ard, aic.discrete, weights, mimo_traitDataSubset2)
```

### - Simmap Reconstructions

```{r, eval=F, echo=T}

trait <- mammals_trait

trait <- as.factor(mammals_trait$Trait_Herbivory)
names(trait) <- rownames(mammals_trait)

tree <- ladderize(mammals_tree)

# For 100 simulation (nsim=100) --> computing time = 147.31s
system.time(
  mtrees <- make.simmap(tree, trait, model = "ARD", nsim = 100)
)

saveRDS(mtrees, "output/RDS/Mammals_4traits_simmap_100.rds")
mammals_simmap <- readRDS("../../output/RDS/Mammals_4traits_simmap_100.rds")




# 2.4s
system.time(
  pd_mtrees <- describe.simmap(mtrees, plot = FALSE)
)

pd_mtrees


mammals_simmap_100 <- mtrees
# saveRDS(mammals_simmap_100, paste0(out.path,"RDS/" ,"Mammals_simmap_100.rds"))
# saveRDS(pd_mtrees, paste0(out.path,"RDS/" ,"pd_mtrees_mammals.rds"))
```

```{r, eval=F, echo=T}

trait <- legumes_trait
tree <- ladderize(legumes_tree)

# For 100 simulation (nsim=100) --> computing time = 147.31s
system.time(
  mtrees <- make.simmap(tree, trait, model = "ARD", nsim = 100)
)

# 2.4s
system.time(
  pd_mtrees <- describe.simmap(mtrees, plot = FALSE)
)

pd_mtrees


legumes_simmap_100 <- mtrees
#saveRDS(legumes_simmap_100, paste0(out.path,"RDS/" ,"Legumes_simmap_100.rds"))
#saveRDS(pd_mtrees, paste0(out.path,"RDS/" ,"pd_mtrees_legumes.rds"))


```

```{r}
mammals_simmap_100 <- readRDS("../../output/RDS/Mammals_simmap_100.rds")
mammals_simmap_100 <- readRDS("../../output/RDS/Mammals_4traits_simmap_100.rds")
mtrees <- mammals_simmap_100

legumes_simmap_100 <- readRDS("../../output/RDS/Legumes_simmap_100.rds")
```

```{r}
obj <- ctt(mtrees, plot=F)

par(mfrow=c(2,1));
plot(obj, type = "number"); plot(obj, type = "rate")


ltt(mtrees[[1]], plot=F, log.lineages = F)
```

### Manual LTT-by trait plot

```{r}

lizard.maps <- mammals_simmap_100
habitat <- names(mammals_simmap_100[[1]]$mapped.edge[1,])


## convert to tree with unbranching nodes
tt<-map.to.singleton(lizard.maps[[1]])
## compute all node heights
H<-nodeHeights(tt)
## pull out heights all all events
h<-max(H)-branching.times(tt)
## get the states at each event
ss<-setNames(as.factor(names(tt$edge.length)),
    tt$edge[,2])
## create a matrix to count lineages
lineages<-matrix(0,length(h),length(levels(habitat)),
    dimnames=list(names(h),levels(habitat)))
## count them
for(i in 1:length(h)){
    ii<-intersect(which(h[i]>H[,1]),which(h[i]<=H[,2]))
    lineages[i,]<-summary(ss[ii])
}
## sort by event
ii<-order(h)
times<-h[ii]
lineages<-lineages[ii,]
```

