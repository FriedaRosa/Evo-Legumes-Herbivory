---
title: "Mammals 4 trait states"
author: "Friederike WÃ¶lke, Rachel Souza Ferreira"
format: html
editor: visual
---

```{r, cleaning, message=FALSE}
rm(list=ls())
gc()

library(ape)
library(phytools)
library(evobiR)
library(geiger)
```

## Preprocessing

### Data & Tree

```{r, Preprocessing, eval = F, include= T}

## 1.] Compute MCC tree from 1000 trees

p.mammals.1000trees <- "input/Mammals/Raw/mammal_1000.nex" # 1000 trees from posterior distribution of mammal phylogeny
tree_mammals <- read.nexus(p.mammals.1000trees) # Raw Data

MCC_mammals <- mcc(tree_mammals, tree = TRUE, part = NULL, rooted = TRUE) # Data Processing
# saveRDS(MCC_mammals, paste0(out.path, "RDS/MCC_mammals.rds"))
# write.tree(MCC_mammals, paste(p.mammals.MCC)) # Procesed Data (MCC tree)

rm(tree_mammals) # remove raw data



## 2.] Create Model dataframe with species and traits

p.mammals.traits <- "input/Mammals/Raw/Trait_data.csv" # all traits for all mammals
mammal_traitData <- read.csv(p.mammals.traits, sep=",")

##make dataframe with species, mass  trait
mammal_traitData2 <- mammal_traitData[,c(1,6,12,20)]
mammal_subset_df <- mammal_traitData2[mammal_traitData2[, 2] == 1, ]

# Initialize a new column filled with zeros
mammal_subset_df$non_herb_small <- 0 
mammal_subset_df$non_herb_large <- 0 
mammal_subset_df$herb_small <- 0 
mammal_subset_df$herb_large <- 0 
mammal_subset_df$Trait_Herbivory <- "NA"


mammal_subset_df$non_herb_small[mammal_subset_df$Mass.g <= 10000 & mammal_subset_df$Diet.Plant <= 95] <- 1
mammal_subset_df$non_herb_large[mammal_subset_df$Mass.g >= 10000 & mammal_subset_df$Diet.Plant <= 95] <- 1
mammal_subset_df$herb_small[mammal_subset_df$Mass.g <= 10000 & mammal_subset_df$Diet.Plant >= 95] <- 1
mammal_subset_df$herb_large[mammal_subset_df$Mass.g >= 10000 & mammal_subset_df$Diet.Plant >= 95] <- 1

mammal_subset_df$Trait_Herbivory[mammal_subset_df$Mass.g <= 10000 & mammal_subset_df$Diet.Plant <= 95] <- "non_herb_small"
mammal_subset_df$Trait_Herbivory[mammal_subset_df$Mass.g >= 10000 & mammal_subset_df$Diet.Plant <= 95] <- "non_herb_large"
mammal_subset_df$Trait_Herbivory[mammal_subset_df$Mass.g <= 10000 & mammal_subset_df$Diet.Plant >= 95] <- "herb_small"
mammal_subset_df$Trait_Herbivory[mammal_subset_df$Mass.g >= 10000 & mammal_subset_df$Diet.Plant >= 95] <- "herb_large"

mammal_traitData3 <- mammal_subset_df[,c(1,9)]
mammal_traitData3$Trait_Herbivory <- as.factor(mammal_traitData3$Trait_Herbivory)
str(mammal_traitData3)

# write.csv(mammal_traitData, file = paste(p.mammals.traits.short), row.names = FALSE)
rm(mammal_subset_df, mammal_traitData,mammal_traitData2)

mammal_traitData <- mammal_traitData3
rm(mammal_traitData3)



## 3.] Data & Tree Matching


# Exclude those taxa from the phylogeny and the trait dataset
mammal_intersectTaxa <- intersect(mammal_traitData$Binomial.1.2, MCC_mammals$tip.label)

# Drop species from the trait data
mammal_traitDataSubset <- subset(mammal_traitData, Binomial.1.2 %in% mammal_intersectTaxa)
mammal_traitDataSubset2 <- data.frame(row.names = mammal_traitDataSubset$Binomial.1.2, 
                                      Trait_Herbivory = mammal_traitDataSubset$Trait_Herbivory)
# write.csv(mammal_traitDataSubset2, paste(p.mammals.traits.MCC))

# Drop tips from the tree
mammal_PhyloSubset <- drop.tip(MCC_mammals,
                               tip = MCC_mammals$tip.label[!MCC_mammals$tip.label %in% mammal_intersectTaxa])
# write.tree(mammal_PhyloSubset, paste(p.mammals.MCC_drop))
rm(mammal_traitDataSubset, mammal_intersectTaxa)



# Insepct Trait in extant species
table(mammal_traitDataSubset2)



# Select Mass trait (and make a vector from it)
Mass <- mammal_traitDataSubset2$Trait_Herbivory
names(Mass) <- row.names(mammal_traitDataSubset2)
# Convert to a factor
Mass <- as.factor(Mass)
table(Mass)

# Reorder data if needed (assuming ReorderData and tree2 are defined)
Mass <- ReorderData(mammal_PhyloSubset, Mass, taxa.names="names")


# ordered trait vector for models (not dataframe)
str(Mass) # make sure it's a factor

# saveRDS(Mass, "input/Mammals/Processed/Mass.rds")


```

### Mk Models

```{r, Mk models, eval = F, include = T}

# Mk models ============================
# estimate the rates of transitioning between ancestral states given a hypothesis 
# (either equal rates(ER), or different rates(ARD))
tree <- ladderize(readRDS("../../input/Mammals/Processed/Mammals_MCC_drop.rds"))
trait <- readRDS("../../input/Mammals/Processed/Mammals_traits_drop.rds")

# computing time = 2.297s
system.time(
  equal <- fitDiscrete(tree, trait, model = "ER"), gcFirst = T
)

# computing time = 8.726s
system.time(
  ard <- fitDiscrete(tree, trait, model = "ARD")
)

# computing time = 8.726s
system.time(
  sym <- fitDiscrete(tree, trait, model = "SYM")
)


# Calculate AIC weights
aic.discrete <- setNames(c(equal$opt$aic, ard$opt$aic, sym$opt$aic), c("equal", "different", "symmetric"))
weights <- aicw(aic.discrete)
weights # ARD model performs better for megaherbivore/other

mammals_tree <- tree
mammals_trait <- trait

rm(trait, tree, equal, ard, aic.discrete, weights)

```

### Simmap ASR

```{r, simmap, include = T, eval = F}
trait <- mammals_trait

trait <- as.factor(mammals_trait$Trait_Herbivory)
names(trait) <- rownames(mammals_trait)

tree <- ladderize(mammals_tree)

# For 100 simulation (nsim=100) --> computing time = 147.31s
system.time(
  mtrees <- make.simmap(tree, trait, model = "ARD", nsim = 100)
)

# saveRDS(mtrees, "output/RDS/Mammals_4traits_simmap_100.rds")
# mammals_simmap <- readRDS("../../output/RDS/Mammals_4traits_simmap_100.rds")


# 2.4s
system.time(
  pd_mtrees <- describe.simmap(mtrees, plot = FALSE)
)
pd_mtrees


mammals_simmap_100 <- mtrees
# saveRDS(mammals_simmap_100, paste0(out.path,"RDS/" ,"Mammals_4traits_simmap_100.rds"))
# saveRDS(pd_mtrees, paste0(out.path,"RDS/" ,"pd_mtrees_mammals_4traits.rds"))

```

## Based on script:New_Figures_Jan24.R

```{r, libraries, message = F}
rm(list=ls())
library(dplyr)
library(rstatix)
library(phytools)
library(ape)
library(geiger)

library(ggplot2)
library(prettyGraphs)

```

### Import Changes Table & Simmap objects

```{r, data}
#### Data =====================================================================
# changes_table_Mammals <- read.csv("~/GitHub/Evo-Legumes-Herbivory/LegumesArmature/output/CSV/4traits_Mammals_changes_table_wo_edgelengths.csv")

changes_table_Mammals <- read.csv("~/GitHub/Evo-Legumes-Herbivory/LegumesArmature/output/CSV/4traits_Mammals_changes_table_w_edgelengths.csv")

mtrees_M <- readRDS("~/GitHub/Evo-Legumes-Herbivory/LegumesArmature/output/RDS/Mammals_4traits_simmap_100.rds")

pd_mammals <- readRDS("../output/RDS/pd_mtrees_mammals_4traits.rds")


```

```{r}
plotSimmap(mtrees_M[[1]],ftype="i",fsize=0.6,ylim=c(-1,Ntip(mtrees_M[[1]])))
obj<-markChanges(mtrees_M[[1]],plot=FALSE)
add.simmap.legend(x=0,y=-1,colors=
    setNames(palette()[1:length(unique(getStates(mtrees_M[[1]],"tips")))],
    sort(unique(getStates(mtrees_M[[1]],"tips")))),prompt=FALSE,vertical=FALSE)
points(obj,pch=8)


```

```{r}
c <- viridis::viridis_pal()(4)
states <- unique(getStates(mtrees_M[[1]], "tips"))

cols1 <- setNames(c, states)
syms <- setNames(c(21, 22, 24, 23), states)

# cols1 <- setNames(c("white","black" ), c("2_dry" ,"1_moist"))
# cols2 <- setNames(c("black","white" ), c("2_dry" ,"1_moist"))
#cols2<-viridis_pal()(5)
#########
mtree <- mtrees_M[[1]]
pdf("MD_Trans_FS2.pdf", paper="a4")
par(bg="light grey",
    fg="black",
    col.lab="light grey",
    col.axis="light grey", 
    mar=c(6, 2, 2, 2))

plotSimmap(mtree,ftype="i",fsize=0.6,ylim=c(-1,Ntip(mtree)), xlim=c(0,1.25*max(nodeHeights(mtree))), col=cols1, outline = F)
geo.legend(colors=c("#697689", "#abb8c3", "#555555"), alpha=0.2)



# plot(obj,xlim=c(0,1.25*max(nodeHeights(tree))), ftype="i",fsize=0.1, lwd=1, outline=F);


## so we can see the changes more clearly:
markChanges<-function(mtree,colors=cols1,cex=1,lwd=2){
  states<-sort(unique(getStates(mtree)))
  if(is.null(colors)) colors<-setNames(palette()[1:length(states)],
                                       states)
  obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
  nc<-sapply(mtree$maps,length)-1
  ii<-which(nc>0)
  nc<-nc[ii]
  h<-vector()
  for(i in 1:length(ii)){
    for(j in 1:nc[i]){
      ss<-names(tree$maps[[ii[i]]])[j+1]
      mm<-tree$edge[ii[i],1]
      dd<-tree$edge[ii[i],2]
      x<-rep(obj$xx[mm]+cumsum(tree$maps[[ii[i]]])[j],2)
      y<-c(obj$yy[dd]-0.1*mean(strheight(LETTERS)*cex),
           obj$yy[dd]+0.1*mean(strheight(LETTERS)*cex))
      #lines(x,y,lwd=5, col=cols1[[ss]], fill=cols2[[ss]],lend=2)
      points(x,y, pch = syms[ss], col=cols1[[ss]], bg=cols1[ss], cex=1.5)
      #h<-c(h,x[1])
    }
  }
  #invisible(h)
}

markChanges(mtree,lwd=3)
#ggsave(filename="Africa_transition_FSrecon.pdf", plot=last_plot(), device="pdf")


add.simmap.legend(colors=sapply(setNames(cols1,c("Open -> Closed", "Closed -> Open")),
                                make.transparent,0.8),prompt=FALSE,x=0,y=30,vertical=TRUE)
dev.off()

```

```{r}
markChanges<-function(tree,colors=NULL,cex=1,lwd=2,plot=TRUE){
	states<-sort(unique(getStates(tree)))
	obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
	nc<-sapply(tree$maps,length)-1
	ii<-which(nc>0)
	nc<-nc[ii]
	xx<-yy<-vector()
	for(i in 1:length(ii)){
		for(j in 1:nc[i]){
			ss<-names(tree$maps[[ii[i]]])[j+1]
			mm<-tree$edge[ii[i],1]
			dd<-tree$edge[ii[i],2]
			x<-c(obj$xx[mm]+cumsum(tree$maps[[ii[i]]])[j])
			y<-c(obj$yy[dd]-0.5*mean(strheight(LETTERS)*cex))
			if(plot) lines(x,y,lwd=lwd,col=colors[ss],lend=2)
			xx<-c(xx,setNames(x[1],
				paste(names(tree$maps[[ii[i]]])[j:(j+1)],
				collapse="->")))
			yy<-c(yy,mean(y))
		}
	}
	XY<-cbind(xx,yy)
	colnames(XY)<-c("x","y")
	invisible(XY)
}




```

```{r}
markChanges2<-function(tree,colors=NULL,cex=1,lwd=2,plot=TRUE){
	states<-sort(unique(getStates(tree)))
	if(is.null(colors)) colors<-setNames(palette()[1:length(states)],
		states)
	obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
	nc<-sapply(tree$maps,length)-1
	ii<-which(nc>0)
	nc<-nc[ii]
	xx<-yy<-vector()
	for(i in 1:length(ii)){
		for(j in 1:nc[i]){
			ss<-names(tree$maps[[ii[i]]])[j+1]
			mm<-tree$edge[ii[i],1]
			dd<-tree$edge[ii[i],2]
			x<-rep(obj$xx[mm]+cumsum(tree$maps[[ii[i]]])[j],2)
			y<-c(obj$yy[dd]-0.5*mean(strheight(LETTERS)*cex),
				obj$yy[dd]+0.5*mean(strheight(LETTERS)*cex))
			if(plot) lines(x,y,lwd=lwd,col=colors[ss],lend=2)
			xx<-c(xx,setNames(x[1],
				paste(names(tree$maps[[ii[i]]])[j:(j+1)],
				collapse="->")))
			yy<-c(yy,mean(y))
		}
	}
	XY<-cbind(xx,yy)
	colnames(XY)<-c("x","y")
	invisible(XY)
}

plotSimmap(mtree,type = "fan", ftype="off",fsize=0.6,ylim=c(-1,Ntip(mtree)), xlim=c(0,1.25*max(nodeHeights(mtree))), col=cols1, outline = F)

plotSimmap(mtree, ftype="off",fsize=0.6, cols1)

# 
# 
# geo.legend(colors=c("#697689", "#abb8c3", "#555555"), alpha=0.2)
markChanges(mtree, cols1)


obj <- density(mtrees_M, method="changes")
plot.changesMap(obj)
```

### Create Plot dataframe

```{r, transition rates}
ageM <- max(nodeHeights(mtrees_M[[1]])) # root age: 217.84 Ma years old

changes_table_Mammals <- changes_table_Mammals %>% 
  mutate(time_new = ageM - time) %>%  # Time before present [Ma]
  mutate(time_new = round(time_new,5)) %>% 
  select(-time)

changes_table_Mammals %>% 
  group_by(N_sim, transition) %>% 
  summarise(N = n(), avg_time = mean(time_new))

changes_table_Mammals %>% 
  group_by(transition, trans_no) %>% 
  summarise(avg_time=mean(time_new))

mean_plotdf <- changes_table_Mammals %>% 
  group_by(transition, trans_no) %>% 
  summarise(N=n(), avg_time = mean(time_new)) 
mean_plotdf$transition <- as.factor(mean_plotdf$transition)

# --------------------------------------- #

plot_df <- changes_table_Mammals %>% 
  mutate(time_rounded = round(time_new, 0)) %>% 
  group_by(transition, time_rounded) %>% summarise(N = n()) %>% 
  distinct() 
plot_df

# Reorder factors :
## 1. [3],[6] transitions from other (herb small, non-herb large) to megaherb => dark green colours
## 2. [1], [2] transitions  from megaherb to other (herb small, non-herb large) => army green-deep orange 
## 3. [4], [5] transition from herb small to other (non-herb large, non-herb small) => yellow-brown
## 4. [7], [9] transition from other (non herb large, non herb small) to herb small => brownish
## 5. [8], [10] transitions  between small and large non herbivores => darkbrown-black


x <- unique(plot_df$transition)
plot_df$transition <- factor(plot_df$transition, levels =c(x[3], x[6], x[1], x[2], x[4], x[5], x[7], x[9], x[8], x[10]))

Levels_ordered <- levels(plot_df$transition)



```

### Set colors

```{r, colors}




# this is for plotting trait states 
cols1<-setNames(c("#476653", "#eadaa0", "#562c29", "#ab5852", "darkgrey"),c("herb_large", "herb_small", "non_herb_large", "non_herb_small", "total"))

# This is for coloring the phylogeny
cols<-setNames(c("#476653", "#eadaa0", "#562c29", "#ab5852"),c("herb_large", "herb_small", "non_herb_large", "non_herb_small"))

# This is for transition rates in all directions
myColours <- c("#87b09a","#476653", # from other (herb small, non-herb large) to megaherb
               "#838469","#d69e49", # from megaherb to other (herb small, non-herb large)
               "#eadaa0","#ab5852", # from herb small to other (non-herb large, non-herb small)
               "#81423e","#562c29", # from other (non herb large, non herb small) to herb small
               "#2b1615","#160b0b") # between small and large non herbivores
## This one is used in the script:
traits4_10cols <- myColours
# add transparency

myColoursAlpha <- prettyGraphs::add.alpha(myColours, alpha=0.2) 

# Colors with transparency:
my_cols <- setNames(myColoursAlpha, c(levels(plot_df$transition))) # 

# Colors without transparency:
my_cols2 <- setNames(myColours,c(levels(plot_df$transition)))

# Without transparency for Mean transitions
mean_cols <- setNames(my_cols2, c(levels(mean_plotdf$transition)))
```

### Simmap plot & Summary table

```{r, plot-simmap, fig.height = 25, fig.width = 8}
par(bg="white",
    fg="black",
    col.lab="blue",
    col.axis="white",
    xpd=TRUE);

plotSimmap(mtrees_M[[1]],cols,fsize=0.2,ftype="i",outline=TRUE,
      lwd=1.5,ylim=c(0,Ntip(mtrees_M[[1]])),
      mar=c(10,0.1,1.1,6))
geo.legend(alpha = 0.2, cex = 1.2)

#### Simmap Summary
print(mtrees_M[[1]]$Q)

print(pd_mammals)

```

Table 1: Transition Matrix (Q-Matrix) used to estimate transitions
between trait states (table created manually from code chunk output
above)

|                    | herb large       | herb small       | non-herb large   | non-herb small   |
|---------------|---------------|---------------|---------------|---------------|
| **herb large**     | --               | \` 0.0054 \`\`\` | \` 0.0012 \`\`\` | \` 0.0000 \`\`\` |
| **herb small**     | \` 0.0037 \`\`\` | --               | \` 0.0003 \`\`\` | \` 0.0129 \`\`\` |
| **non-herb large** | \` 0.0093 \`\`\` | \` 0.0007 \`\`\` | --               | \` 0.0286 \`\`\` |
| **non-herb small** | \` 0.0000 \`\`\` | \` 0.0086 \`\`\` | \` 0.0021 \`\`\` | --               |

### Plots

#### 1.1 Panel: lines and dots (untransformed)

```{r, plot1-1, fig.height = 20}
ggplot()+
     geom_line(aes(x = time_rounded, y = N, col = transition),
               data = plot_df, lwd=1.5)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     scale_x_reverse()+
     ylab("Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()


ggplot()+
     geom_point(aes(x = time_rounded, y = N, fill = transition), shape = 23,
               data = plot_df)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     scale_x_reverse()+
     ylab("Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()


#### Cut to last 45 MA

ggplot()+
     geom_line(aes(x = time_rounded, y = N, col = transition),
               data = plot_df, lwd=1.5)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     ylab("Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()+
  xlim(45, 0)


ggplot()+
     geom_point(aes(x = time_rounded, y = N, fill = transition), shape = 23,
               data = plot_df)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     ylab("Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()+
  xlim(45, 0)

```

#### 1.2 Panel: lines and dots (log-transformed rates)

```{r, plot1-2, fig.height = 20}
range(plot_df$N)

ggplot()+
     geom_line(aes(x = time_rounded, y = log(N), col = transition),
               data = plot_df, lwd=1.5)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     scale_x_reverse()+
     ylab("log Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()


ggplot()+
     geom_point(aes(x = time_rounded, y = log(N), fill = transition), shape = 23,
               data = plot_df)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     scale_x_reverse()+
     ylab("log Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()


#### Cut to last 45 MA

ggplot()+
     geom_line(aes(x = time_rounded, y = log(N), col = transition),
               data = plot_df, lwd=1.5)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     ylab("log Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()+
  xlim(45, 0)


ggplot()+
     geom_point(aes(x = time_rounded, y = log(N), fill = transition), shape = 23,
               data = plot_df)+
     facet_wrap(transition~., nrow= 10)+
     scale_color_manual(values=my_cols2,
                        aesthetics = c("colour"))+
     #theme_light()+
     theme(legend.position="none")+
     ylab("log Cumulative Number of Transitions") +
     xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_light()+
  xlim(45, 0)
```

#### 2.1 Stacked Bar graph (untransformed)

```{r, plot2-1}
ggplot()+
  geom_col(aes(x = time_rounded, y = N, fill = transition),
           data = plot_df)+
  # geom_line(aes(x = time_rounded, y = N, fill = transition, col = transition),
  #          data = plot_df)+
  #facet_wrap(transition~., nrow= 10)+
  scale_color_manual(values=my_cols2,
                     aesthetics = c("fill"))+
  theme_light()+
    theme(legend.position="none")+
  scale_x_reverse()+
    ylab("Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") 



Fig1a_M <- ggplot()+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") + 
  theme_classic()+
  #scale_fill_manual(values = mean_cols)+
  labs(title ="Number of transitions per 1 million years (Mammals)")+
  scale_x_reverse()

Fig1a_M
```

#### 2.2 Stacked Bar graph (log-transformed)

```{r}
ggplot()+
  geom_col(aes(x = time_rounded, y = log(N), fill = transition),
           data = plot_df)+
  # geom_line(aes(x = time_rounded, y = N, fill = transition, col = transition),
  #          data = plot_df)+
  #facet_wrap(transition~., nrow= 10)+
  scale_color_manual(values=my_cols2,
                     aesthetics = c("fill"))+
  theme_light()+
    theme(legend.position="none")+
  scale_x_reverse()+
    ylab("log Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") 





Fig1a_M_log <- ggplot()+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("log Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") + 
  theme_classic()+
  scale_fill_manual(values = mean_cols)+
  labs(title ="Number of transitions per 1 million years (Mammals)")+
  scale_x_reverse()
```

#### 3.1 Mean number of transitions (untransformed)

```{r, plot3, message = F, warning=F}
## Mean cumulative rates (averaged across simulations)
plot_df <- changes_table_Mammals %>% 
  mutate(time_rounded = round(time_new, 0)) %>% 
  group_by(transition, N_sim, time_rounded) %>%
  summarise(mean_N = mean(length(trans_no))) %>%
  ungroup() %>%
  group_by(transition, time_rounded) %>%
  summarise(N = mean(mean_N))

Fig1b_M <- ggplot()+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("Mean Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") + xlim(45, 0) +
  theme_classic()+
  scale_fill_manual(values = mean_cols)+
  labs(title ="Mean Number of transitions per 1 million years (Mammals)")


gridExtra::grid.arrange(Fig1a_M, Fig1b_M, nrow = 2)


## Together ====================== ###
### Export via Pane -> Export -> as PDF -> Cairo device -> width 6 x height 3.5: Name : Mammals_CumTrans_Bar.pdf
ggplot()+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = N), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = N), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("Cumulative Number of Transitions") +
  xlim(230, -2) + xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_classic()+
  scale_fill_manual(values = mean_cols)+
  labs(title ="Number of transitions per 1 million years (Megaherbivores)")
```

#### 3.2 Mean number of transitions (log-transformed)

```{r, message = F, warning=F}
## Mean cumulative rates (averaged across simulations)
plot_df <- changes_table_Mammals %>% 
  mutate(time_rounded = round(time_new, 0)) %>% 
  group_by(transition, N_sim, time_rounded) %>%
  summarise(mean_N = mean(length(trans_no))) %>%
  ungroup() %>%
  group_by(transition, time_rounded) %>%
  summarise(N = mean(mean_N))

Fig1b_M_log <- ggplot()+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("Mean Cumulative Number of Transitions") +
  xlab("Time since Present (Ma) [Resolution 1 Ma]") + xlim(45, 0) +
  theme_classic()+
  scale_fill_manual(values = mean_cols)+
  labs(title ="Mean Number of transitions per 1 million years (Mammals)")


gridExtra::grid.arrange(Fig1a_M_log, Fig1b_M_log, nrow = 2)


## Together ====================== ###
### Export via Pane -> Export -> as PDF -> Cairo device -> width 6 x height 3.5: log(N)ame : Mammals_CumTrans_Bar.pdf
ggplot()+
    geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[10], col = myColoursAlpha[10], 
           data = plot_df %>% filter(transition == Levels_ordered[10]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[9], col = myColoursAlpha[9], 
           data = plot_df %>% filter(transition == Levels_ordered[9]))+ 
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[8], col = myColoursAlpha[8], 
           data = plot_df %>% filter(transition == Levels_ordered[8]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[7], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[7]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[6], col = myColoursAlpha[7], 
           data = plot_df %>% filter(transition == Levels_ordered[6]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[5], col = myColoursAlpha[5], 
           data = plot_df %>% filter(transition == Levels_ordered[5]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[4], col = "white", 
           data = plot_df %>% filter(transition == Levels_ordered[4]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[3], col = "white",
           data = plot_df %>% filter(transition == Levels_ordered[3]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill =  myColoursAlpha[2], col = "black", 
           data = plot_df %>% filter(transition == Levels_ordered[2]))+
  geom_col(aes(x = time_rounded, y = log(N)), fill = myColoursAlpha[1], col = "black",
           data = plot_df %>% filter(transition == Levels_ordered[1]))+
  ylab("Cumulative Number of Transitions") +
  xlim(230, -2) + xlab("Time since Present (Ma) [Resolution 1 Ma]") +
  theme_classic()+
  scale_fill_manual(values = mean_cols)+
  labs(title ="Number of transitions per 1 million years (Megaherbivores)")
```

#### 4.1 Lines-Rates plot (untransformed)

```{r}
# average and mean transition times (cumulative)
p1 <- ggplot()+
  geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[10], col = myColoursAlpha[10], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[10]))+
  geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[9], col = myColoursAlpha[9], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[9]))+  
  geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[8], col = myColoursAlpha[8], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[8]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[7], col = myColoursAlpha[7], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[7]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[6], col = myColoursAlpha[6], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[6]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[5], col = myColoursAlpha[5], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[5]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[4], col = myColoursAlpha[4], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[4]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[3], col = myColoursAlpha[3], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[3]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[2], col = myColoursAlpha[2], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[2]))+
    geom_point(aes(x = time_new, y = trans_no), 
             shape = 21, fill = myColoursAlpha[1], col = myColoursAlpha[1], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[1]))+
  #scale_x_reverse()+
  xlim(230, -5) +theme_classic()


p1 + 
  geom_point(aes(x = avg_time, y = trans_no), shape = 24, col = "black",  fill = myColours[1], 
             data = mean_plotdf %>% filter(transition == Levels_ordered[1]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 24, col = "black", fill = myColours[2],
             data = mean_plotdf %>% filter(transition == Levels_ordered[2]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 25, col = "black", fill = myColours[3],
             data = mean_plotdf %>% filter(transition == Levels_ordered[3]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 25, col = "black", fill = myColours[4],
             data = mean_plotdf %>% filter(transition == Levels_ordered[4]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 23, col = "black", fill = myColours[5],
             data = mean_plotdf %>% filter(transition == Levels_ordered[5]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 23, col = "black", fill = myColours[6],
             data = mean_plotdf %>% filter(transition == Levels_ordered[6]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 21, col = "black", fill = myColours[7],
             data = mean_plotdf %>% filter(transition == Levels_ordered[7]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 21, col = "black", fill = myColours[8],
             data = mean_plotdf %>% filter(transition == Levels_ordered[8]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 21, col = "grey", fill = myColours[9],
             data = mean_plotdf %>% filter(transition == Levels_ordered[9]))+
  geom_point(aes(x = avg_time, y = trans_no), shape = 21, col = "white", fill = myColours[10],
             data = mean_plotdf %>% filter(transition == Levels_ordered[10]))



```

#### 4.2 Lines-Rates plot (log-transformed)

```{r}
# average and mean transition times (cumulative)
p2 <- ggplot()+
   geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[10], col = myColoursAlpha[10], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[10]))+
  geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[9], col = myColoursAlpha[9], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[9]))+  
  geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[8], col = myColoursAlpha[8], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[8]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[7], col = myColoursAlpha[7], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[7]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[6], col = myColoursAlpha[6], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[6]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[5], col = myColoursAlpha[5], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[5]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[4], col = myColoursAlpha[4], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[4]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[3], col = myColoursAlpha[3], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[3]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[2], col = myColoursAlpha[2], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[2]))+
    geom_point(aes(x = time_new, y = log(trans_no)), 
             shape = 21, fill = myColoursAlpha[1], col = myColoursAlpha[1], 
             data = changes_table_Mammals %>% 
             filter(transition == Levels_ordered[1]))+
  #scale_x_reverse()+
  xlim(230, -5) +theme_classic()


p2 + 
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 24, col = "black",  fill = myColours[1], 
             data = mean_plotdf %>% filter(transition == Levels_ordered[1]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 24, col = "black", fill = myColours[2],
             data = mean_plotdf %>% filter(transition == Levels_ordered[2]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 25, col = "black", fill = myColours[3],
             data = mean_plotdf %>% filter(transition == Levels_ordered[3]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 25, col = "black", fill = myColours[4],
             data = mean_plotdf %>% filter(transition == Levels_ordered[4]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 23, col = "black", fill = myColours[5],
             data = mean_plotdf %>% filter(transition == Levels_ordered[5]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 23, col = "black", fill = myColours[6],
             data = mean_plotdf %>% filter(transition == Levels_ordered[6]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 21, col = "black", fill = myColours[7],
             data = mean_plotdf %>% filter(transition == Levels_ordered[7]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 21, col = "black", fill = myColours[8],
             data = mean_plotdf %>% filter(transition == Levels_ordered[8]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 21, col = "grey", fill = myColours[9],
             data = mean_plotdf %>% filter(transition == Levels_ordered[9]))+
  geom_point(aes(x = avg_time, y = log(trans_no)), shape = 21, col = "white", fill = myColours[10],
             data = mean_plotdf %>% filter(transition == Levels_ordered[10]))
  
  
```

## Quick LTT plot

```{r, ltt, eval = F}
##### Quick plot =================
tree_mammals <- ladderize(readRDS("../input/Mammals/Processed/Mammals_MCC_drop.rds"))
mammals_simmap <- mtrees_M
trait <- readRDS("../input/Mammals/Processed/Mammals_traits_drop.rds")
obj <- ltt.simmap(mammals_simmap[[1]], plot = F)

layout(matrix(c(1,2),2,1),heights=c(0.4,0.6))

# this is for plotting trait states 
cols1<-setNames(c("#476653", "#eadaa0", "#562c29", "#ab5852", "darkgrey"),c("herb_large", "herb_small", "non_herb_large", "non_herb_small", "total"))


plot(mammals_simmap[[1]],cols1,ftype="off",lwd=2,
    mar=c(0,4.1,1.1,1.1))
grid()
legend("topleft",names(cols1),pch=22,pt.bg=cols1,
    bty="n",cex=0.8,pt.cex=1.2)
par(mar=c(5.1,4.1,0,1.1))
plot(obj,colors=cols1,bty="n",las=1,lwd=4,show.tree=FALSE,
    legend=FALSE,ylim=c(1,Ntip(mammals_tree)),
    xlab="time (above the root)")
grid()
```

```{r, include = F, eval = F}
## internally used functions
BRANCHING<-function(phy, is_ultrametric){
	x<-if(is_ultrametric) branching.times(phy)
	else { 
		sort(setNames(max(nodeHeights(phy))- XY, 1:tt$Nnode+Ntip(tt)))
		                
	for (i in 1:tt$Nnode+Ntip(tt)){
	  nodeheight(tt)
	  
	}	                
		                
			nodeheight(tree=phy,c(1:phy$Nnode+Ntip(phy)))
	}
	x
}


## original:

BRANCHING<-function(phy,is_ultrametric){
	x<-if(is_ultrametric) branching.times(phy)
	else { 
		sort(setNames(max(nodeHeights(phy))-sapply(1:phy$Nnode+Ntip(phy),
			nodeheight,tree=phy),1:phy$Nnode+Ntip(phy)))
	}
	x
}

TIPHEIGHTS<-function(phy,is_ultrametric){
	x<-if(is_ultrametric) {
		min(setNames(sapply(1:Ntip(phy),nodeheight,tree=phy),1:Ntip(phy)))
	} else setNames(sapply(1:Ntip(phy),nodeheight,tree=phy),1:Ntip(phy))
	x
}


```

```{r, include = F, eval = F}
## convert to tree with unbranching nodes
tt<-map.to.singleton(mammals_simmap[[1]])
## compute all node heights
H<-nodeHeights(tt)
## pull out heights all all events
h<-max(H)-branching.times(tt)




h <- c(0,max(H)-BRANCHING(tt,T),TIPHEIGHTS(tt,T))
ss <- setNames(as.factor(names(tt$edge.length)), tt$edge[,2])





## get the states at each event
ss<-setNames(as.factor(names(tt$edge.length)),
    tt$edge[,2])
## create a matrix to count lineages
lineages<-matrix(0,length(h),length(levels(trait)),
    dimnames=list(names(h),levels(trait)))
## count them
for(i in 1:length(h)){
    ii<-intersect(which(h[i]>H[,1]),which(h[i]<=H[,2]))
    lineages[i,]<-summary(ss[ii])
}
## sort by event
ii<-order(h)
times<-h[ii]
lineages<-lineages[ii,]

plot_df <- data.frame(times, lineages)



plot_df %>%
  ggplot(aes(x = times))+
  geom_line(aes(y = herb_large), col = "gold")+
  geom_line(aes(y = herb_small), col = "grey")+
  geom_line(aes(y = non_herb_large), col = "darkgrey")+
  geom_line(aes(y = non_herb_small), col = "lightgrey")+
  theme_classic()







## create plot area
plot(NA,xlim=range(times),ylim=c(0,max(lineages)),
    xlab="time",ylab="lineages",bty="n",las=1)
## add lineages through time for each type
lines(times,lineages[,1],type="s",lwd=3,col=palette()[1])
lines(times,lineages[,2],type="s",col=palette()[2],lwd=3)
lines(times,lineages[,3],type="s",lwd=3,col=palette()[3])
lines(times,lineages[,4],type="s",col=palette()[4],lwd=3)
## superimpose tree
cols<-setNames(make.transparent(palette()[c(1,2,3,4)],0.5),
    levels(trait))
plot(mammals_simmap[[1]],cols,ftype="off",add=TRUE,lwd=1,
    mar=c(5.1,4.1,4.1,2.1))
obj<-markChanges(mammals_simmap[[1]],plot=FALSE)
for(i in 1:nrow(obj)) lines(rep(obj[i,"x"],2),c(0,obj[i,"y"]),
    lty="dotted",col=make.transparent("grey",0.8))
legend("topleft",c(levels(trait)),
    pch=22,pt.bg=palette()[c(1,2,3,4)],pt.cex=1.2,cex=0.8,
    bty="n")
```

```{r, include = F, eval = F}

getChanges<-function(tree){
  states<-sort(unique(getStates(tree)))
  nc<-sapply(tree$maps,length)-1
  b<-which(nc>0)
  nc<-nc[b]
  xx<-vector()
  H<-nodeHeights(tree)
  for(i in 1:length(b)){
    for(j in 1:nc[i]){
      ss<-names(tree$maps[[b[i]]])[j+1]
      x<-rep(H[b[i],1]+cumsum(tree$maps[[b[i]]])[j],2)
      xx<-c(xx,setNames(x[1],
                        paste(names(tree$maps[[b[i]]])[j:(j+1)],
                              collapse="->")))
    }
  }
  xx
}

```
