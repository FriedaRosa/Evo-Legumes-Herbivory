"0","#| label: Modified Fig4 Pollination Study"
"0",""
"0","## Ref[1], Ref[0] -> Ref[2]"
"0","transition_times <- function(simmap){"
"0","  # below adapted from Liam Revells' phytools blog "
"0","  # http://blog.phytools.org/2015/08/getting-timing-of-trait-changes-from.html"
"0","  # extracts raw transition times from a simmap (collapses multiple transitions"
"0","  # down into single transition events)"
"0","  # get tips and their states"
"0","  x <- phytools::getStates(simmap,""tips"")"
"0","  # get unique states"
"0","  states <- sort(unique(x))"
"0","  # get length of states"
"0","  m <- length(states)"
"0","  # below makes a little matrix describing transitions"
"0","  ct <- sapply(states, "
"0","               function(x,y) sapply(y, function(y,x) paste(x,""->"", y, sep=""""), "
"0","                                    x = x), y = states)"
"0","  rm(x, states)"
"0","  # then a matrix to invalidate self->self transitions"
"0","  ii <- matrix(TRUE, m, m)"
"0","  diag(ii) <- rep(FALSE, m)"
"0","  # then a list to store results in"
"0","  changes <- vector(mode=""list"", length = m*(m - 1))"
"0","  rm(m)"
"0","  # named by types of transitions"
"0","  names(changes) <- as.vector(ct[ii])"
"0","  rm(ct, ii)"
"0","  # then singling out maps where transitions happen (where there is more than 1 state)"
"0","  nc <- sapply(simmap$maps, length) - 1"
"0","  ind <- which(nc > 0)"
"0","  nc <- nc[ind]"
"0","  "
"0","  # getting the node heights (measure of time/branch lengths) across the tree"
"0","  H <- phytools::nodeHeights(simmap)"
"0","  maps <- simmap$maps[ind]"
"0","  # then looping through and calculating the node heights of each transition"
"0","  for(i in 1:length(maps)){"
"0","    for(j in 1:nc[i]){"
"0","      sc <- paste(names(maps[[i]])[j:(j + 1)], collapse = ""->"")"
"0","      h <- H[ind[i], 1] + cumsum(maps[[i]])[j]"
"0","      changes[[sc]] <- c(changes[[sc]], as.numeric(h))"
"0","    }"
"0","  }"
"0","  rm(nc, ind, h, H, i, j, sc, maps)"
"0","  # removing any nulls from list of changes and sorting small to large"
"0","  changes <- changes[!sapply(changes, is.null)]"
"0","  changes <- lapply(changes, sort, decreasing = FALSE)"
"0","  "
"0","  # now convert this changes list into nice data frame output"
"0","  output <- data.frame()"
"0","  for(i in 1:length(changes)){"
"0","    df <- dplyr::bind_cols(changes[i])"
"0","    df <- df %>%"
"0","      mutate(transition = colnames(df)) %>%"
"0","      rename(nodeheight = 1)"
"0","    output <- rbind(output, df)"
"0","  }"
"0","  "
"0","  # node heights are the height above the root, so time but inverse along the tree"
"0","  # to get time from node heights need to subtract from max height of tree"
"0","  output$time <- max(nodeHeights(simmap)) - output$nodeheight"
"0","  "
"0","  # get rid of nodeheight column"
"0","  output <- output[-1]"
"0","  "
"0","  # and return the output! to graph etc."
"0","  output"
"0","}"
"0",""
"0","# End of function ====================================================================================== #"
"0",""
"0","# Ref[0] -> Ref[3]"
"0",""
"0","mtrees <- readRDS(""../output/RDS/mtrees_multiSimmap.rds"")"
"0",""
"0","# apply function across list of multiple simulations:"
"0",""
"0","armature_transitions <- data.frame()"
"0","for(i in 1:length(mtrees)){"
"0","  temp <- cbind(i, transition_times(mtrees[[i]]))"
"0","  armature_transitions <- rbind(armature_transitions, temp)"
"0","}"
"0","rm(temp, i)"
"0",""
"0","table(armature_transitions$transition)"
"1","
"
"1","armature->no_armature "
"1","no_armature->armature "
"1","
"
"1","                 9091 "
"1","                 5231 "
"1","
"
"0","# build new data frame with cumulative number of transitions"
"0","armature_trans_cumul <- data.frame()"
"0","for(n in 1:100){"
"0","  trans <- armature_transitions %>%"
"0","    dplyr::filter(i == n) %>%"
"0","    dplyr::group_by(transition) %>%"
"0","    dplyr::mutate(trans_no = row_number(i))"
"0","  "
"0","  armature_trans_cumul <- rbind(armature_trans_cumul, trans)"
"0","}"
"0","rm(n, trans)"
"0",""
"0",""
"0","##### copied from somewhere else in the code from the same script....:"
"0",""
"0","# first need to know average number of transitions, rounded"
"0","trans_avg_length <- armature_trans_cumul %>%"
"0","  dplyr::group_by(transition, i) %>%"
"0","  dplyr::mutate(no_trans = max(trans_no)) %>%"
"0","  dplyr::ungroup() %>%"
"0","  dplyr::filter(trans_no == no_trans) %>%"
"0","  dplyr::group_by(transition) %>%"
"0","  dplyr::mutate(avg_length = round(mean(no_trans), digits = 0)) %>%"
"0","  dplyr::select(transition, avg_length) %>%"
"0","  dplyr::ungroup() %>%"
"0","  dplyr::distinct()"
"0",""
"0","# now knowing this, can rearrange data and average times across rows"
"0","avg_trans_times <- armature_trans_cumul %>%"
"0","  dplyr::group_by(transition, trans_no) %>%"
"0","  dplyr::mutate(avg_time = mean(time)) %>%"
"0","  dplyr::mutate(SE_time = sqrt(var(time) / length(time))) %>%"
"0","  dplyr::select(transition, trans_no, avg_time, SE_time) %>%"
"0","  dplyr::distinct()"
"0",""
"0","# reduce avg_trans_times to trans_avg_length"
"0","avg_trans_times_a2na <- avg_trans_times %>%"
"0","  dplyr::filter(transition == ""armature->no_armature"") %>%"
"0","  dplyr::filter(trans_no <= trans_avg_length[1,2])"
"0","avg_trans_times_na2a <- avg_trans_times %>%"
"0","  dplyr::filter(transition == ""no_armature->armature"") %>%"
"0","  dplyr::filter(trans_no <= trans_avg_length[2,2])"
"0","avg_trans_times <- rbind(avg_trans_times_a2na, avg_trans_times_na2a)"
"0","rm(avg_trans_times_a2na, avg_trans_times_na2a)"
"0",""
"0","# export these results to csv in case I need them"
"0","readr::write_csv(avg_trans_times, ""../Fig4Pollination/mean_transition_times_armature_MCC.csv"")"
"0",""
"0",""
"0",""
"0","#### Plotting ======================================"
"0",""
"0","# install.packages(""prettyGraphs"") #to set transparancy of colors with ""alpha"""
"0","library(prettyGraphs)"
"0",""
"0","myColours = c(""steelblue"", ""#FFBB00"")"
"0","myColoursAlpha <- add.alpha(myColours, alpha=0.4)"
"0","my_cols <- setNames(myColoursAlpha, c(""armature->no_armature"", ""no_armature->armature""))"
"0",""
"0","pdf(""../Fig4Pollination/armature_transition_times_mean_hist.pdf"", height = 2.8, width = 6)"
"0","min <- min(avg_trans_times$avg_time)"
"0","max <- max(avg_trans_times$avg_time)"
"0","ax <- pretty(min:35, n = 20)"
"0",""
"0","arm_to_no_arm <- avg_trans_times %>%"
"0","  dplyr::filter(transition == ""armature->no_armature"") %>%"
"0","  dplyr::mutate(arm_to_no_arm = avg_time) %>%"
"0","  dplyr::ungroup() %>%"
"0","  dplyr::select(arm_to_no_arm)"
"0",""
"0","no_arm_to_arm <- avg_trans_times %>%"
"0","  dplyr::filter(transition == ""no_armature->armature"") %>%"
"0","  dplyr::mutate(no_arm_to_arm = avg_time) %>%"
"0","  dplyr::ungroup() %>%"
"0","  dplyr::select(no_arm_to_arm)"
"0",""
"0","a2na <- hist(arm_to_no_arm$arm_to_no_arm, breaks = ax, plot = FALSE)"
"0","na2a <- hist(no_arm_to_arm$no_arm_to_arm, breaks = ax, plot = FALSE)"
"0",""
"0","plot (a2na, col = myColours[1], xlab = ""Time of transitions (mya)"",  "
"0","      main = """", ylab = ""number of transitions"", "
"0","      ylim = c(0, 40), xlim = c(100,0)) # alter if x values change!"
