
load("")

ctt_relative <- function(trees, segments = 20, ...) {
  if (!inherits(trees, "multiSimmap"))
    stop("trees should be an object of class \"multiSimmap\".")
  tree <- as.phylo(trees[[1]])
  h <- max(nodeHeights(tree))
  b <- segments
  segs <- cbind(seq(0, h - h / b, h / b), seq(1 / b * h, h, h / b))
  nchanges <- rep(0, b)
  
  LTT <- ltt(tree, plot = FALSE)
  LTT <- cbind(LTT$ltt[2:(length(LTT$ltt) - 1)],
               LTT$times[2:(length(LTT$ltt) - 1)],
               LTT$times[3:length(LTT$ltt)])
  
  ii <- 1
  edge.length <- rep(0, b)
  
  for (i in 1:nrow(segs)) {
    done.seg <- FALSE
    while (LTT[ii, 2] <= segs[i, 2] && done.seg == FALSE) {
      edge.length[i] <- edge.length[i] +
        LTT[ii, 1] * (min(segs[i, 2], LTT[ii, 3]) -
                        max(segs[i, 1], LTT[ii, 2]))
      if (LTT[ii, 3] >= segs[i, 2]) done.seg <- TRUE
      if (LTT[ii, 3] <= segs[i, 2]) ii <- if (ii < nrow(LTT)) ii + 1 else ii
    }
  }
  
  object <- list(segments = segs, edge.length = edge.length, tree = tree)
  class(object) <- "ctt_relative"
  object
}

plot.ctt_relative <- function(x, ...) {
  h <- max(nodeHeights(x$tree))
  args <- list(...)
  
  if (is.null(args$type))
    args$type <- "rate"
  if (is.null(args$show.tree))
    args$show.tree <- FALSE
  if (is.null(args$add))
    args$add <- FALSE
  if (is.null(args$ylim))
    args$ylim <- c(0, max(x$edge.length))
  if (is.null(args$xlim))
    args$xlim <- c(max(x$segments), min(x$segments))
  if (is.null(args$lwd))
    args$lwd <- 2
  if (is.null(args$xlab))
    args$xlab <- "time since the present"
  if (is.null(args$ylab))
    args$ylab <- "mean number of changes / total edge length"
  
  args$type <- "l"
  args$x <- h - as.vector(t(x$segments))
  args$y <- x$edge.length
  if (!args$add)
    do.call(plot, args)
  else
    do.call(lines, args)
  
  if (args$show.tree)
    plotTree(x$tree, add = TRUE, ftype = "off", lwd = 1,
             color = make.transparent("blue", 0.1), mar = par()$mar,
             direction = "leftwards", xlim = args$xlim)
}

